# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: vaultkubernetesauthbackendroles.secrets.hashicorp.com
spec:
  group: secrets.hashicorp.com
  names:
    kind: VaultKubernetesAuthBackendRole
    listKind: VaultKubernetesAuthBackendRoleList
    plural: vaultkubernetesauthbackendroles
    singular: vaultkubernetesauthbackendrole
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: VaultKubernetesAuthBackendRole is the Schema for the vaultkubernetesauthbackendroles
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: VaultKubernetesAuthBackendRoleSpec VaultAuthBackendSpec VaultAuthSpec
              defines the desired state of VaultKubernetesAuthBackendRoleSpec
            properties:
              aliasNameSource:
                default: serviceaccount_uid
                description: 'AliasNameSource Configures how identity aliases are
                  generated. Valid choices are: serviceaccount_uid, serviceaccount_name.
                  When serviceaccount_uid is specified, the machine generated UID
                  from the service account will be used as the identity alias name.
                  When serviceaccount_name is specified, the service account''s namespace
                  and name will be used as the identity alias name e.g. vault/vault-auth.
                  While it is strongly advised that you use serviceaccount_uid, you
                  may also use serviceaccount_name in cases where you want to set
                  the alias ahead of time, and the risks are mitigated or otherwise
                  acceptable given your use case. It is very important to limit who
                  is able to delete/create service accounts within a given cluster.'
                enum:
                - serviceaccount_uid
                - serviceaccount_name
                type: string
              audience:
                description: Audience claim to verify in the JWT (Optional).
                type: string
              boundServiceAccountNames:
                description: BoundServiceAccountNames is a list of service account
                  names able to access this role. If set to "*" all names are allowed.
                items:
                  type: string
                type: array
              boundServiceAccountNamespaces:
                description: BoundServiceAccountNamespaces is a list of namespaces
                  allowed to access this role. If set to "*" all namespaces are allowed.
                items:
                  type: string
                type: array
              name:
                description: Name of the role.
                type: string
              namespace:
                description: Namespace to auth to in Vault
                type: string
              path:
                description: Mount to use when authenticating to auth method.
                type: string
              tokenBoundCIDRs:
                description: Policies is a list of policies to encode onto generated
                  tokens.
                items:
                  type: string
                type: array
              tokenExplicitMaxTTL:
                description: TokenExplicitMaxTTL if set, will encode an explicit max
                  TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl
                  would otherwise allow a renewal.
                type: string
              tokenMaxTTL:
                description: TokenMaxTTL is the maximum lifetime for generated tokens.
                  This current value of this will be referenced at renewal time.
                type: string
              tokenNoDefaultPolicy:
                description: TokenNoDefaultPolicy if set, the default policy will
                  not be set on generated tokens; otherwise it will be added to the
                  policies set in token_policies.
                type: boolean
              tokenNumUses:
                description: TokenNumUses is the maximum number of times a generated
                  token may be used (within its lifetime); 0 means unlimited. If you
                  require the token to have the ability to create child tokens, you
                  will need to set this value to 0.
                type: integer
              tokenPeriod:
                description: TokenPeriod is the period, if any, to set on the token.
                type: string
              tokenPolicies:
                description: Policies is a list of policies to encode onto generated
                  tokens.
                items:
                  type: string
                type: array
              tokenTTL:
                description: TokenTTL is the incremental lifetime for generated tokens.
                  This current value of this will be referenced at renewal time.
                type: string
              tokenType:
                description: 'TokenType is the type of token that should be generated.
                  Can be service, batch, or default to use the mount''s tuned default
                  (which unless changed will be service tokens). For token store roles,
                  there are two additional possibilities: default-service and default-batch
                  which specify the type to return unless the client requests a different
                  type at generation time.'
                enum:
                - service
                - batch
                - default
                type: string
              vaultAuthRef:
                description: VaultAuthRef of the VaultAuth resource If no value is
                  specified the Operator will default to the `default` VaultAuth,
                  configured in its own Kubernetes namespace.
                type: string
            required:
            - boundServiceAccountNames
            - boundServiceAccountNamespaces
            - name
            - path
            type: object
          status:
            description: VaultKubernetesAuthBackendRoleStatus defines the observed
              state of VaultKubernetesAuthBackendRoleSpec
            properties:
              error:
                type: string
              path:
                type: string
              valid:
                description: Valid auth mechanism.
                type: boolean
            required:
            - error
            - path
            - valid
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
