{{- /*
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0
*/ -}}

{{- if eq .Values.controller.manager.clientCache.persistenceModel "direct-encrypted" }}
apiVersion: secrets.hashicorp.com/v1alpha1
kind: VaultAuth
metadata:
  name: {{ include "chart.fullname" . }}-default-transit-auth
  namespace: {{ .Release.Namespace }}
  labels:
    control-plane: controller-manager
    component: controller-manager
    app.kubernetes.io/component: controller-manager
    cacheStorageEncryption: "true"
  {{- include "chart.labels" . | nindent 4 }}
spec:
  vaultConnectionRef: {{ .Values.controller.manager.clientCache.storageEncryption.vaultConnectionRef }}
  namespace: {{ .Values.controller.manager.clientCache.storageEncryption.namespace }}
  method: {{ .Values.controller.manager.clientCache.storageEncryption.method }}
  mount: {{ .Values.controller.manager.clientCache.storageEncryption.mount }}
  {{- if eq .Values.controller.manager.clientCache.storageEncryption.method "kubernetes" }}
  kubernetes:
    role: {{ .Values.controller.manager.clientCache.storageEncryption.kubernetes.role }}
    serviceAccount: {{ .Values.controller.manager.clientCache.storageEncryption.kubernetes.serviceAccount | default (printf "%s-controller-manager" (include "chart.fullname"
     . )) }}
    {{- if .Values.controller.manager.clientCache.storageEncryption.kubernetes.tokenAudiences }}
    audiences: {{ .Values.controller.manager.clientCache.storageEncryption.kubernetes.tokenAudiences | toJson }}
    {{- end }}
  {{- else if eq .Values.controller.manager.clientCache.storageEncryption.method "jwt" }}
  jwt:
    role: {{ .Values.controller.manager.clientCache.storageEncryption.jwt.role }}
    {{- if .Values.controller.manager.clientCache.storageEncryption.jwt.secretRef }}
    secretRef: {{ .Values.controller.manager.clientCache.storageEncryption.jwt.secretRef }}
    {{- else if .Values.controller.manager.clientCache.storageEncryption.jwt.serviceAccount }}
    serviceAccount: {{ .Values.controller.manager.clientCache.storageEncryption.jwt.serviceAccount }}
    {{- if .Values.controller.manager.clientCache.storageEncryption.jwt.tokenAudiences }}
    audiences: {{ .Values.controller.manager.clientCache.storageEncryption.jwt.tokenAudiences | toJson }}
    {{- end }}
    {{- end }}
  {{- else if eq .Values.controller.manager.clientCache.storageEncryption.method "appRole" }}
  appRole:
    roleId: {{ .Values.controller.manager.clientCache.storageEncryption.appRole.roleid }}
    secretRef: {{ .Values.controller.manager.clientCache.storageEncryption.appRole.secretRef }}
  {{- end }}
  {{- if .Values.controller.manager.clientCache.storageEncryption.headers }}
  headers:
    {{ tpl .Values.controller.manager.clientCache.storageEncryption.headers . | trim }}
  {{- end }}
  {{- if .Values.controller.manager.clientCache.storageEncryption.params }}
  params:
    {{ tpl .Values.controller.manager.clientCache.storageEncryption.params . | trim }}
  {{- end }}
  storageEncryption:
    keyName: {{ .Values.controller.manager.clientCache.storageEncryption.keyName }}
    mount: {{ .Values.controller.manager.clientCache.storageEncryption.transitMount }}
{{- end }}
