# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

# Top level configuration for the vault secrets operator deployment.
# This is comprised of a controller and a kube rbac proxy container.
controller:

  # Set the number of replicas for the operator.
  # @type: integer
  replicas: 1

  # Settings related to the kubeRbacProxy container. This container is an HTTP proxy for the
  # controller manager which performs RBAC authorization against the Kubernetes API using SubjectAccessReviews.
  kubeRbacProxy:
    # Image sets the repo and tag of the kube-rbac-proxy image to use for the controller.
    image:
      repository: gcr.io/kubebuilder/kube-rbac-proxy
      tag: v0.11.0

    # Configures the default resources for the kube rbac proxy container.
    # For more information on configuring resources, see the K8s documentation:
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    # @recurse: true
    # @type: map
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 5m
        memory: 64Mi

  # Settings related to the vault-secrets-operator container.
  manager:
    # Image sets the repo and tag of the vault-secrets-operator image to use for the controller.
    image:
      repository: hashicorp/vault-secrets-operator
      tag: 0.1.0-beta

    # Configures the client cache which is used by the controller to cache (and potentially persist) vault tokens that
    # are the result of using the VaultAuthMethod. This enables re-use of Vault Tokens
    # throughout their TTLs as well as the ability to renew.
    # Persistence is only useful in the context of Dynamic Secrets, so "none" is an okay default.
    clientCache:
      # Defines the `-client-cache-persistence-model` which caches+persists vault tokens.
      # Valid values are:
      # "none" - in-memory client cache is used, no tokens are persisted.
      # "direct-unencrypted" - in-memory client cache is persisted, unencrypted. This is NOT recommended for any production workload.
      # "direct-encrypted" - in-memory client cache is persisted encrypted using the Vault Transit engine.
      # Note: It is strongly encouraged to not use the setting of "direct-unencrypted" in
      # production due to the potential of vault tokens being leaked as they would then be stored
      # in clear text.
      #
      # default: "none"
      # @type: string
      persistenceModel: ""

      # Defines the size of the in-memory LRU cache *in entries*, that is used by the client cache controller.
      # Larger numbers will increase memory usage by the controller, lower numbers will cause more frequent evictions
      # of the client cache which can result in additional Vault client counts.
      #
      # default: 10000
      # @type: integer
      cacheSize:

      # StorageEncryption provides the necessary configuration to encrypt the client storage
      # cache within Kubernetes objects using (required) Vault Transit Engine.
      # This should only be configured when client cache persistence with encryption is enabled.
      # E.g. `controller.manager.clientCache.persistenceMode=direct-encrypted`
      # Typically there should only ever be one VaultAuth configured with
      # StorageEncryption in the Cluster.
      storageEncryption:
        # Vault namespace for the VaultAuthMethod
        # @type: string
        namespace: ""

        # KeyName to use for encrypt/decrypt operations via Vault Transit.
        # @type: string
        keyName: ""

        # Mount path for the Vault Auth Method.
        # @type: string
        mount: kubernetes

        # Vault Auth Role to use
        # This is a required field and must be setup in Vault prior to deploying the helm chart
        # if `defaultAuthMethod.enabled=true`
        # @type: string
        role: ""

        # Kubernetes ServiceAccount associated with the default Vault Auth Role
        # default: Operator's ServiceAccount
        # @type: string
        serviceAccount: ""

        # Token Audience should match the audience of the vault kubernetes auth role.
        # @type: array<string>
        tokenAudiences: []

        # Mount path for the Transit Method.
        # @type: string
        transitMount: ""

    # Defines the maximum number of concurrent reconciles by the controller.
    # NOTE: Currently this is only used by the reconciliation logic of dynamic secrets.
    #
    # default: 100
    # @type: integer
    maxConcurrentReconciles:

    # Configures the default resources for the vault-secrets-operator container.
    # For more information on configuring resources, see the K8s documentation:
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    # @recurse: true
    # @type: map
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi

  # Sets the configuration settings used by the controller. Any custom changes will be reflected in the
  # data field of the configmap.
  # For more information on configuring resources, see the K8s documentation:
  # https://kubernetes.io/docs/concepts/configuration/configmap/
  # @recurse: true
  # @type: map
  controllerConfigMapYaml:
    health:
      healthProbeBindAddress: :8081
    leaderElection:
      leaderElect: true
      resourceName: b0d477c0.hashicorp.com
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443

  # Configures the environment variable KUBERNETES_CLUSTER_DOMAIN used by KubeDNS.
  # @type: string
  kubernetesClusterDomain: cluster.local


# Configure the metrics service ports used by the metrics service.
# Set the configuration fo the metricsService port.
# @recurse: true
# @type: map
metricsService:
  # Set the port settings for the metrics service.
  # For more information on configuring resources, see the K8s documentation:
  # https://kubernetes.io/docs/concepts/services-networking/service/
  # @type: map
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  type: ClusterIP

# Configures the default VaultConnection CR which will be used by resources
# if they do not specify a VaultConnection reference. The name is 'default' and will
# always be installed in the same namespace as the operator.
# NOTE:
# * It is strongly recommended to deploy the vault secrets operator in a secure Vault environment
#   which includes a configuration utilizing TLS and installing Vault into its own restricted namespace.
defaultVaultConnection:
  # toggles the deployment of the VaultAuthMethod CR
  # @type: boolean
  enabled: false

  # Address of the Vault Server
  # @type: string
  # Example: http://vault.default.svc.cluster.local:8200
  address: ""

  # CACertSecret containing the trusted PEM encoded CA certificate chain.
  # Note: This secret must exist prior to deploying the CR.
  # @type: string
  caCertSecret: ""

  # TLSServerName to use as the SNI host for TLS connections.
  # @type: string
  tlsServerName: ""

  # SkipTLSVerify for TLS connections.
  # @type: boolean
  skipTLSVerify: false

  # Headers to be included in all Vault requests.
  # headers: |
  #   "vault-something1": "foo"
  #   "vault-something2": "bar"
  #   "vault-something3": "baz"
  # @type: string
  headers: ""


# Configures and deploys the default VaultAuthMethod CR which will be used by resources
# if they do not specify a VaultAuthMethod reference. The name is 'default' and will
# always be installed in the same namespace as the operator.
# NOTE:
# * It is strongly recommended to deploy the vault secrets operator in a secure Vault environment
#   which includes a configuration utilizing TLS and installing Vault into its own restricted namespace.
defaultAuthMethod:
  # toggles the deployment of the VaultAuthMethod CR
  # @type: boolean
  enabled: false

  # Vault namespace for the VaultAuthMethod CR
  # @type: string
  namespace: ""

  # Vault Auth method to be used with the VaultAuthMethod CR
  # @type: string
  method: kubernetes

  # Mount path for the Vault Auth Method.
  # @type: string
  mount: kubernetes

  # Vault Kubernetes auth method specific configuration
  kubernetes:
    # Vault Auth Role to use
    # This is a required field and must be setup in Vault prior to deploying the helm chart
    # if `defaultAuthMethod.enabled=true`
    # @type: string
    role: ""

    # Kubernetes ServiceAccount associated with the default Vault Auth Role
    # @type: string
    serviceAccount: default

    # Token Audience should match the audience of the vault kubernetes auth role.
    # @type: array<string>
    tokenAudiences: []

  # Vault JWT auth method specific configuration
  jwt:
    # Vault Auth Role to use
    # This is a required field and must be setup in Vault prior to deploying the helm chart
    # if `jwtAuthMethod.enabled=true`
    # @type: string
    role: ""

    # One of the following is required prior to deploying the helm chart
    # - K8s secret that contains the JWT
    # - K8s service account if a service account JWT is used as a Vault JWT auth token and needs generating by VSO

    # Name of Kubernetes Secret that has the Vault JWT auth token. This is a required field if a JWT is provided
    # @type: string
    secretName: ""

    # Key of Kubernetes Secret that has the Vault JWT auth token. This is a required field if JWT is provided
    # @type: string
    secretKey: ""

    # Kubernetes ServiceAccount to generate a service account JWT
    # @type: string
    serviceAccount: "default"

    # Token Audience should match the bound_audiences or the `aud` list in bound_claims if applicable
    # of the Vault JWT auth role.
    # @type: array<string>
    tokenAudiences: [ ]

  # Params to use when authenticating to Vault
  # params: |
  #   "vault-something1": "foo"
  #   "vault-something2": "bar"
  #   "vault-something3": "baz"
  # @type: string
  params: ""

  # Headers to be included in all Vault requests.
  # headers: |
  #   "vault-something1": "foo"
  #   "vault-something2": "bar"
  #   "vault-something3": "baz"
  # @type: string
  headers: ""

## Used by unit tests, and will not be rendered except when using `helm template`, this can be safely ignored.
tests:
  # @type: boolean
  enabled: true
