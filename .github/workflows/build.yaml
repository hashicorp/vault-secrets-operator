name: build

on:
  push:
    branches: ["*"]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build, e.g. 0.1.0"
        type: string
        required: false

env:
  PKG_NAME: "vault-secrets-operator"

jobs:
  get-go-version:
    name: "Determine Go toolchain version"
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v3
      - name: Determine Go version
        id: get-go-version
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> $GITHUB_OUTPUT

  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v3
      - name: get product version
        id: get-product-version
        run: |
          VERSION="${{ github.event.inputs.version || '0.0.0-dev' }}"
          echo "Using version ${VERSION}"
          echo "product-version=${VERSION}" >> $GITHUB_OUTPUT

  build-pre-checks:
    runs-on: ubuntu-latest
    needs: get-go-version
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - name: go fmt
        run: |
          make check-fmt
      - name: tf fmt
        run: |
          make check-tffmt
      - name: go mod tidy
        run: |
          go mod tidy
          test -z "$(git status --porcelain)"
      - name: generate manifests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          make generate manifests
          test -z "$(git status --porcelain)"

  generate-metadata-file:
    needs: get-product-version
    runs-on: ubuntu-latest
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: 'Checkout directory'
        uses: actions/checkout@v3
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@v1
        with:
          version: ${{ needs.get-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}

      - uses: actions/upload-artifact@v2
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}

  build:
    needs:
      - get-product-version
      - get-go-version
      - build-pre-checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["arm", "arm64", "386", "amd64"]
      fail-fast: true

    name: Go ${{ needs.get-go-version.outputs.go-version }} linux ${{ matrix.arch }} build

    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}

      - name: Build
        env:
          GOOS: "linux"
          GOARCH: ${{ matrix.arch }}
          VERSION: ${{ needs.get-product-version.outputs.product-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir dist out
          make ci-build
          zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip dist/
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip
          path: out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip

  build-docker:
    name: Docker ${{ matrix.arch }} build
    needs:
      - get-product-version
      - build
      - get-go-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # The distroless image seems to only support amd64 and arm64
        arch: ["arm64", "amd64"]
    env:
      repo: ${{github.event.repository.name}}
      version: ${{needs.get-product-version.outputs.product-version}}

    steps:
      - uses: actions/checkout@v3
      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v1
        env:
          GO_VERSION: ${{ needs.get-go-version.outputs.go-version }}
        with:
          version: ${{env.version}}
          target: release-default
          arch: ${{matrix.arch}}
          tags: |
            docker.io/hashicorp/${{env.repo}}:${{env.version}}
            public.ecr.aws/hashicorp/${{env.repo}}:${{env.version}}
