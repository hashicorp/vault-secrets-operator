name: build

on:
  push:
    branches-ignore:
      - 'docs/**'
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build, e.g. 0.1.0"
        type: string
        required: false

env:
  PKG_NAME: "vault-secrets-operator"
  # used by scripts that fetch build tools from GH
  GH_GET_RETRIES: 5

jobs:
  get-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - name: get product version
        id: get-product-version
        run: |
          VERSION="${{ github.event.inputs.version || '0.0.0-dev' }}"
          echo "Using version ${VERSION}"
          echo "product-version=${VERSION}" >> $GITHUB_OUTPUT

  build-pre-checks:
    runs-on: ubuntu-latest
    needs: get-product-version
    outputs:
      go-version: ${{ steps.setup-go.outputs.go-version }}
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - id: setup-go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
        with:
          go-version-file: .go-version
      - name: go fmt
        run: |
          make check-fmt
      - name: tf fmt
        run: |
          make check-tffmt
      - name: go mod tidy
        run: |
          go mod tidy
          test -z "$(git status --porcelain)"
      - name: check versions
        run: |
          make check-versions VERSION=${{ needs.get-product-version.outputs.product-version }}
      - name: generate manifests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          make generate manifests
          if [ -n "$(git status --porcelain)" ]; then
            echo "Generated manifests are out of date. Please run 'make generate manifests' and commit the changes."
            exit 1
          fi

  generate-metadata-file:
    needs: get-product-version
    runs-on: ubuntu-latest
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: Checkout directory
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@v1
        with:
          version: ${{ needs.get-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}
          repositoryOwner: "hashicorp"
      - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}

  build:
    name: Go ${{ needs.build-pre-checks.outputs.go-version }} linux ${{ matrix.arch }} build
    needs: [get-product-version, build-pre-checks]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["arm64", "amd64"]
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - name: Setup go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
        with:
          go-version-file: .go-version
      - name: Build
        env:
          GOOS: "linux"
          GOARCH: ${{ matrix.arch }}
          VERSION: ${{ needs.get-product-version.outputs.product-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir dist out
          make ci-build
          zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip dist/${{ env.GOOS }}/${{ env.GOARCH }}/
      - name: Upload binaries
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip
          path: out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip

  build-docker:
    name: Docker ${{ matrix.arch }} build
    needs: [get-product-version, build-pre-checks, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["arm64", "amd64"]
    env:
      repo: ${{github.event.repository.name}}
      version: ${{needs.get-product-version.outputs.product-version}}

    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v2
        env:
          VERSION: ${{ needs.get-product-version.outputs.product-version }}
          GO_VERSION: ${{ needs.build-pre-checks.outputs.go-version }}
        with:
          version: ${{env.version}}
          target: release-default
          arch: ${{matrix.arch}}
          tags: |
            docker.io/hashicorp/${{env.repo}}:${{env.version}}
            public.ecr.aws/hashicorp/${{env.repo}}:${{env.version}}
      - name: Check binary version in container
        shell: bash
        run: |
          version_output=$(docker run hashicorp/${{env.repo}}:${{env.version}} --version --output=json)
          echo $version_output
          git_version=$(echo $version_output | jq -r .gitVersion)

          if [ "$git_version" != "${{ env.version }}" ]; then
            echo "$gitVersion expected to be ${{ env.version }}"
            exit 1
          fi

  build-docker-ubi:
    name: UBI ${{ matrix.arch }} build
    needs: [get-product-version, build-pre-checks, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["arm64", "amd64"]
    env:
      repo: ${{github.event.repository.name}}
      version: ${{needs.get-product-version.outputs.product-version}}
      image_tag: ${{needs.get-product-version.outputs.product-version}}-ubi

    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v2
        env:
          VERSION: ${{ needs.get-product-version.outputs.product-version }}
          GO_VERSION: ${{ needs.build-pre-checks.outputs.go-version }}
        with:
          version: ${{env.version}}
          target: release-ubi
          arch: ${{matrix.arch}}
          tags: |
            docker.io/hashicorp/${{env.repo}}:${{env.image_tag}}
            public.ecr.aws/hashicorp/${{env.repo}}:${{env.image_tag}}

      - name: Check binary version in container
        shell: bash
        run: |
          version_output=$(docker run hashicorp/${{env.repo}}:${{env.image_tag}} --version --output=json)
          echo $version_output
          git_version=$(echo $version_output | jq -r .gitVersion)

          if [ "$git_version" != "${{ env.version }}" ]; then
            echo "$gitVersion expected to be ${{ env.version }}"
            exit 1
          fi

  build-docker-ubi-redhat:
    name: UBI ${{ matrix.arch }} RedHat build
    needs: [get-product-version, build-pre-checks, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Building only amd64 for the RedHat registry for now
        arch: ["amd64"]
    env:
      repo: ${{github.event.repository.name}}
      version: ${{needs.get-product-version.outputs.product-version}}
      image_tag: ${{needs.get-product-version.outputs.product-version}}-ubi

    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v2
        env:
          VERSION: ${{ needs.get-product-version.outputs.product-version }}
          GO_VERSION: ${{ needs.build-pre-checks.outputs.go-version }}
        with:
          version: ${{env.version}}
          target: release-ubi-redhat
          arch: ${{matrix.arch}}
          # The quay id here corresponds to the project id on RedHat's portal
          redhat_tag: quay.io/redhat-isv-containers/64b072322e2773c28d30d988:${{env.image_tag}}

      - name: Check binary version in container
        shell: bash
        run: |
          version_output=$(docker run quay.io/redhat-isv-containers/64b072322e2773c28d30d988:${{env.image_tag}} --version --output=json)
          echo $version_output
          git_version=$(echo $version_output | jq -r .gitVersion)

          if [ "$git_version" != "${{ env.version }}" ]; then
            echo "$gitVersion expected to be ${{ env.version }}"
            exit 1
          fi

  versions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "setting versions"
    outputs:
      K8S_VERSIONS: '["1.29.2", "1.28.7", "1.27.11", "1.26.14", "1.25.16"]'
      VAULT_N: "1.16.2"
      VAULT_N_1: "1.15.6"
      VAULT_N_2: "1.14.10"
  latest-vault:
    name: vault:${{ matrix.vault-version }} kind:${{ matrix.k8s-version }} ${{ matrix.installation-method }} enterprise=${{ matrix.vault-enterprise }}
    needs:
      - get-product-version
      - build-pre-checks
      - build-docker
      - versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        vault-version:
          - ${{ needs.versions.outputs.VAULT_N }}
        k8s-version: ${{ fromJson(needs.versions.outputs.K8S_VERSIONS) }}
        installation-method: [helm, kustomize]
        vault-enterprise: [true, false]
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - uses: ./.github/actions/integration-test
        name: vault:${{ matrix.vault-version }} kind:${{ matrix.k8s-version }}
        with:
          k8s-version: ${{ matrix.k8s-version }}
          vault-version: ${{ matrix.vault-version }}
          vault-enterprise: ${{ matrix.vault-enterprise }}
          installation-method: ${{ matrix.installation-method }}
          operator-image-archive: ${{ github.event.repository.name }}_release-default_linux_amd64_${{ needs.get-product-version.outputs.product-version }}_${{ github.sha }}.docker.tar
          version: ${{ needs.test.outputs.version }}
          vault-license-ci: ${{ secrets.VAULT_LICENSE_CI }}
          hcp-organization-id: ${{ secrets.HCP_ORGANIZATION_ID }}
          hcp-project-id: ${{ secrets.HCP_PROJECT_ID }}
          hcp-client-id: ${{ secrets.HCP_CLIENT_ID }}
          hcp-client-secret: ${{ secrets.HCP_CLIENT_SECRET }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          log-prefix: "latest-vault-"
  latest-k8s:
    name: vault:${{ matrix.vault-version }} kind:${{ matrix.k8s-version }} ${{ matrix.installation-method }} enterprise=${{ matrix.vault-enterprise }}
    runs-on: ubuntu-latest
    needs:
      - get-product-version
      - build-pre-checks
      - build-docker
      - versions
    strategy:
      fail-fast: false
      matrix:
        vault-version:
          - ${{ needs.versions.outputs.VAULT_N_1 }}
          - ${{ needs.versions.outputs.VAULT_N_2 }}
        k8s-version:
          - ${{ fromJson(needs.versions.outputs.K8S_VERSIONS)[0] }}
        installation-method: [kustomize]
        vault-enterprise: [true]
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - uses: ./.github/actions/integration-test
        name: vault:${{ matrix.vault-version }} kind:${{ matrix.k8s-version }}
        with:
          k8s-version: ${{ matrix.k8s-version }}
          vault-version: ${{ matrix.vault-version }}
          vault-enterprise: ${{ matrix.vault-enterprise }}
          installation-method: ${{ matrix.installation-method }}
          operator-image-archive: ${{ github.event.repository.name }}_release-default_linux_amd64_${{ needs.get-product-version.outputs.product-version }}_${{ github.sha }}.docker.tar
          version: ${{ needs.test.outputs.version }}
          vault-license-ci: ${{ secrets.VAULT_LICENSE_CI }}
          hcp-organization-id: ${{ secrets.HCP_ORGANIZATION_ID }}
          hcp-project-id: ${{ secrets.HCP_PROJECT_ID }}
          hcp-client-id: ${{ secrets.HCP_CLIENT_ID }}
          hcp-client-secret: ${{ secrets.HCP_CLIENT_SECRET }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          log-prefix: "latest-k8s-"
