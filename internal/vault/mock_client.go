// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package vault is a generated GoMock package.
package vault

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/hashicorp/vault-secrets-operator/api/v1alpha1"
	credentials "github.com/hashicorp/vault-secrets-operator/internal/vault/credentials"
	api "github.com/hashicorp/vault/api"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientBase is a mock of ClientBase interface.
type MockClientBase struct {
	ctrl     *gomock.Controller
	recorder *MockClientBaseMockRecorder
}

// MockClientBaseMockRecorder is the mock recorder for MockClientBase.
type MockClientBaseMockRecorder struct {
	mock *MockClientBase
}

// NewMockClientBase creates a new mock instance.
func NewMockClientBase(ctrl *gomock.Controller) *MockClientBase {
	mock := &MockClientBase{ctrl: ctrl}
	mock.recorder = &MockClientBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientBase) EXPECT() *MockClientBaseMockRecorder {
	return m.recorder
}

// KVv1 mocks base method.
func (m *MockClientBase) KVv1(arg0 string) (*api.KVv1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVv1", arg0)
	ret0, _ := ret[0].(*api.KVv1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KVv1 indicates an expected call of KVv1.
func (mr *MockClientBaseMockRecorder) KVv1(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVv1", reflect.TypeOf((*MockClientBase)(nil).KVv1), arg0)
}

// KVv2 mocks base method.
func (m *MockClientBase) KVv2(arg0 string) (*api.KVv2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVv2", arg0)
	ret0, _ := ret[0].(*api.KVv2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KVv2 indicates an expected call of KVv2.
func (mr *MockClientBaseMockRecorder) KVv2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVv2", reflect.TypeOf((*MockClientBase)(nil).KVv2), arg0)
}

// Read mocks base method.
func (m *MockClientBase) Read(arg0 context.Context, arg1 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockClientBaseMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockClientBase)(nil).Read), arg0, arg1)
}

// Write mocks base method.
func (m *MockClientBase) Write(arg0 context.Context, arg1 string, arg2 map[string]any) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockClientBaseMockRecorder) Write(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClientBase)(nil).Write), arg0, arg1, arg2)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckExpiry mocks base method.
func (m *MockClient) CheckExpiry(arg0 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExpiry", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExpiry indicates an expected call of CheckExpiry.
func (mr *MockClientMockRecorder) CheckExpiry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExpiry", reflect.TypeOf((*MockClient)(nil).CheckExpiry), arg0)
}

// Clone mocks base method.
func (m *MockClient) Clone(arg0 string) (Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0)
	ret0, _ := ret[0].(Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockClientMockRecorder) Clone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockClient)(nil).Clone), arg0)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GetCacheKey mocks base method.
func (m *MockClient) GetCacheKey() (ClientCacheKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheKey")
	ret0, _ := ret[0].(ClientCacheKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheKey indicates an expected call of GetCacheKey.
func (mr *MockClientMockRecorder) GetCacheKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheKey", reflect.TypeOf((*MockClient)(nil).GetCacheKey))
}

// GetCredentialProvider mocks base method.
func (m *MockClient) GetCredentialProvider() credentials.CredentialProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialProvider")
	ret0, _ := ret[0].(credentials.CredentialProvider)
	return ret0
}

// GetCredentialProvider indicates an expected call of GetCredentialProvider.
func (mr *MockClientMockRecorder) GetCredentialProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialProvider", reflect.TypeOf((*MockClient)(nil).GetCredentialProvider))
}

// GetTokenSecret mocks base method.
func (m *MockClient) GetTokenSecret() *api.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenSecret")
	ret0, _ := ret[0].(*api.Secret)
	return ret0
}

// GetTokenSecret indicates an expected call of GetTokenSecret.
func (mr *MockClientMockRecorder) GetTokenSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenSecret", reflect.TypeOf((*MockClient)(nil).GetTokenSecret))
}

// GetVaultAuthObj mocks base method.
func (m *MockClient) GetVaultAuthObj() *v1alpha1.VaultAuth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaultAuthObj")
	ret0, _ := ret[0].(*v1alpha1.VaultAuth)
	return ret0
}

// GetVaultAuthObj indicates an expected call of GetVaultAuthObj.
func (mr *MockClientMockRecorder) GetVaultAuthObj() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultAuthObj", reflect.TypeOf((*MockClient)(nil).GetVaultAuthObj))
}

// GetVaultConnectionObj mocks base method.
func (m *MockClient) GetVaultConnectionObj() *v1alpha1.VaultConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaultConnectionObj")
	ret0, _ := ret[0].(*v1alpha1.VaultConnection)
	return ret0
}

// GetVaultConnectionObj indicates an expected call of GetVaultConnectionObj.
func (mr *MockClientMockRecorder) GetVaultConnectionObj() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultConnectionObj", reflect.TypeOf((*MockClient)(nil).GetVaultConnectionObj))
}

// Init mocks base method.
func (m *MockClient) Init(arg0 context.Context, arg1 client.Client, arg2 *v1alpha1.VaultAuth, arg3 *v1alpha1.VaultConnection, arg4 string, arg5 *ClientOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockClientMockRecorder) Init(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockClient)(nil).Init), arg0, arg1, arg2, arg3, arg4, arg5)
}

// IsClone mocks base method.
func (m *MockClient) IsClone() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClone")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClone indicates an expected call of IsClone.
func (mr *MockClientMockRecorder) IsClone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClone", reflect.TypeOf((*MockClient)(nil).IsClone))
}

// KVv1 mocks base method.
func (m *MockClient) KVv1(arg0 string) (*api.KVv1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVv1", arg0)
	ret0, _ := ret[0].(*api.KVv1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KVv1 indicates an expected call of KVv1.
func (mr *MockClientMockRecorder) KVv1(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVv1", reflect.TypeOf((*MockClient)(nil).KVv1), arg0)
}

// KVv2 mocks base method.
func (m *MockClient) KVv2(arg0 string) (*api.KVv2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVv2", arg0)
	ret0, _ := ret[0].(*api.KVv2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KVv2 indicates an expected call of KVv2.
func (mr *MockClientMockRecorder) KVv2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVv2", reflect.TypeOf((*MockClient)(nil).KVv2), arg0)
}

// Login mocks base method.
func (m *MockClient) Login(arg0 context.Context, arg1 client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockClientMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClient)(nil).Login), arg0, arg1)
}

// Namespace mocks base method.
func (m *MockClient) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockClientMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockClient)(nil).Namespace))
}

// Read mocks base method.
func (m *MockClient) Read(arg0 context.Context, arg1 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockClientMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockClient)(nil).Read), arg0, arg1)
}

// Restore mocks base method.
func (m *MockClient) Restore(arg0 context.Context, arg1 *api.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockClientMockRecorder) Restore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockClient)(nil).Restore), arg0, arg1)
}

// SetNamespace mocks base method.
func (m *MockClient) SetNamespace(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNamespace", arg0)
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockClientMockRecorder) SetNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockClient)(nil).SetNamespace), arg0)
}

// Write mocks base method.
func (m *MockClient) Write(arg0 context.Context, arg1 string, arg2 map[string]any) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockClientMockRecorder) Write(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockClient)(nil).Write), arg0, arg1, arg2)
}
