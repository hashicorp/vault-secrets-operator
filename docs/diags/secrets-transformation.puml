@startuml
!theme C4_sandstone from https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/themes
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Sequence.puml

autonumber
title VSO reconciliation with secret data transformation
ControllerRuntime -> SecretReconciler: Reconcile Syncable Secret CR e.g VDS, VSS, ...
alt reconcile
    SecretReconciler -> TransformationSpecBuilder: Syncable Secret CR e.g VDS, VSS, ...
    TransformationSpecBuilder -> TransformationSpecBuilder: Gather local template specs and local filters
    TransformationSpecBuilder -> TransformationSpecBuilder: Gather shared template specs and shared filters
else error
    TransformationSpecBuilder -> SecretReconciler: Transformation spec gather and build failed
    SecretReconciler -> ControllerRuntime: Requeue Secret CR on reconciliation error (repeat)
else reconciliation
    TransformationSpecBuilder -> SecretReconciler: Return final transformation spec with final template parsed
    SecretReconciler -> SecretSource: Get secret data
    SecretSource -> SecretReconciler: Returns secret data from Vault, HCPVS
    SecretReconciler -> SecretController: Create secret data input from secret data, metadata, labels, annotations
    SecretReconciler -> SecretDataBuilder: Final transformation spec and template data input
    SecretDataBuilder -> SecretDataBuilder: Execute the final template with the secret data input
else error
    SecretDataBuilder -> SecretReconciler: Execution failed
    SecretReconciler -> ControllerRuntime: Requeue Secret CR on reconciliation error (repeat)
else reconciliation successful
    SecretDataBuilder -> SecretDataBuilder: Apply include/exclude field filters
    SecretDataBuilder -> SecretReconciler: Return rendered K8s secret data
    SecretReconciler -> DestinationK8sSecret: HMAC rendered K8 secret data and sync to destination
    SecretReconciler -> ControllerRuntime: Requeue Secret CR on success (repeat)
end
@enduml

@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Dynamic.puml
!include sprites/secret-128-scaled.puml
!include sprites/pod-128-scaled.puml
!include sprites/HashiCorp_Logomark_White_RGB-scaled.puml

UpdateElementStyle("container", $shadowing="true")
UpdateElementStyle("person", $shadowing="true")
AddRelTag("deployer_sp", $lineColor="red", $lineStyle=BoldLine(), $lineThickness=3)
AddRelTag("deployer_app", $lineColor="#118bda", $lineStyle=BoldLine(), $lineThickness=3)
AddRelTag("vso", $lineColor="#d33716", $lineStyle=BoldLine(), $lineThickness=3)

LAYOUT_TOP_DOWN()
HIDE_STEREOTYPE()
UpdateBoundaryStyle($elementName="container", $type="k8s")

Person(user, Deployer/Agent, $sprite="person")

System_Boundary(c1, "Vault") {
    Container(app, "Vault Secret", "", "Secret Source", $sprite="HashiCorp_Logomark_White_RGB")
}

System_Boundary(c2, "Kubernetes Cluster", "") {
Container_Boundary(vso_ns, "vso-namespace") {
    Container(vso, "Vault Secrets Operator", "Pod", "Secrets Lifecycle Agent", $sprite="HashiCorp_Logomark_White_RGB", $tags="ns")
}

Container_Boundary(app_ns, "app-namespace", $tags="namespace") {
Container_Boundary(c6, "App Deployment", $tags="namespace") {
    Container(pod1, "app1", "Pod", "", $sprite="pod")
}
    Container(app_secret, "app-secret", "Transformed secret data", "", $sprite="secret")
}
}

Rel_R(user, app, "Configure secrets engine", "HTTPS v1/secret/foo", $tags="deployer_app", $index=Index())
Rel_R(user, app_ns, "Apply Vault*Secret CR YAML manifest", "HTTPS k8s/api", $tags="deployer_app", $index=LastIndex()-1)
Rel_D(vso, app_ns, "Reconcile Vault*Secret CR", "HTTPS k8s/api", $tags="vso", $index=Index())
Rel_U(vso, app, "Request secret", "HTTPS v1/secret/foo", $tags="vso", $index=LastIndex()-1)
Rel_D(vso, vso, "Transform secret data", "", $tags="vso", $index=LastIndex()-2)
Rel_D(vso, app_secret, "Store transformed secret data", "HTTPS k8s/api", $tags="vso", $index=LastIndex()-3)
Rel_L(pod1, app_secret, "Get Secret Data from volume/env-var", $tags="deployer_sp", $index=Index()-1)
@enduml
