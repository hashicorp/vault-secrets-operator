// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CSISecretsSpec defines the desired state of CSISecrets. It contains the
// configuration for the CSI driver to populate the secret data.
type CSISecretsSpec struct {
	// Namespace is the Vault namespace where the secret is located.
	Namespace string `json:"namespace,omitempty"`
	// AccessControl provides configuration for controlling access to the secret.
	AccessControl AccessControl `json:"accessControl"`
	// Secrets that will be synced with the CSI driver.
	Secrets SecretCollection `json:"secrets"`
	// SyncConfig provides configuration for syncing the secret data with the CSI driver.
	SyncConfig CSISyncConfig `json:"syncConfig,omitempty"`
	// VaultAuthRef is the reference to the VaultAuth resource.
	VaultAuthRef *VaultAuthRef `json:"vaultAuthRef,omitempty"`
}

type SecretCollection struct {
	// Transformation provides configuration for transforming the secret data before
	// it is stored in the CSI volume.
	Transformation *Transformation `json:"transformation,omitempty"`
	// VaultAppRoleSecretIDs is a list of AppRole secret IDs to be used to populate the secret.
	VaultAppRoleSecretIDs []VaultAppRoleSecretID `json:"vaultAppRoleSecretIDs,omitempty"`
	// VaultStaticSecrets is a list of static secrets to be synced by the CSI driver.
	VaultStaticSecrets []VaultStaticSecretCollectable `json:"vaultStaticSecrets,omitempty"`
}

// VaultAppRoleSecretID defines the AppRole secret ID to be used to populate the secret.
type VaultAppRoleSecretID struct {
	// Mount path to the AppRole auth engine.
	Mount string `json:"mount"`
	// Role is the name of the AppRole.
	Role string `json:"role"`
	// Metadata is the metadata to be associated with the secret ID. It is set on
	// the token generated by the secret ID.
	Metadata map[string]string `json:"metadata,omitempty"`
	// CIDRList is the list of CIDR blocks that access the secret ID.
	CIDRList []string `json:"cidrList,omitempty"`
	// TokenBoundCIDRs is the list of CIDR blocks that can be used to authenticate
	// using tokens generated by this secret ID.
	TokenBoundCIDRs []string `json:"tokenBoundCIDRs,omitempty"`
	// TTL is the TTL for the secret ID, after which it becomes invalid.
	// +kubebuilder:validation:Pattern=`^([0-9]+(\.[0-9]+)?(s|m|h))$`
	TTL string `json:"ttl,omitempty"`
	// NumUses is the number of times the secret ID can be used.
	NumUses int `json:"numUses,omitempty"`
	// WrapTTL is the TTL for the wrapped secret ID.
	// +kubebuilder:validation:Pattern=`^([0-9]+(\.[0-9]+)?(s|m|h))$`
	WrapTTL string `json:"wrapTTL,omitempty"`
	// SyncRoleID is the flag to fetch the role ID from the AppRole auth engine.
	// Requires that the provisioning VaultAuth has the necessary permissions to fetch the role ID.
	SyncRoleID *bool `json:"syncRoleID,omitempty"`
	// Transformation provides configuration for transforming the secret data before
	// it is stored in the CSI volume.
	Transformation *Transformation `json:"transformation,omitempty"`
}

type CSISyncConfig struct {
	// ContainerState is the state of the container that the CSI driver always sync
	// on. This configuration is useful to sync when the last state of the container
	// is in the terminated state and the restart count is greater than 0.
	ContainerState *ContainerState `json:"containerState"`
}

type ContainerState struct {
	// NamePattern of the container. Can be expressed as a regular expression.
	NamePattern string `json:"namePattern,omitempty"`
	// ImagePattern of the container. Can be expressed as a regular expression.
	ImagePattern string `json:"imagePattern,omitempty"`
}

// AccessControl provides configuration for controlling access to the secret.
// It allows specifying the namespaces, service account, pod names, and pod
// labels that should be allowed to access the secret.
type AccessControl struct {
	// ServiceAccountPattern is the name of the service account that should be used to
	// access the secret. It can be specified as a regex pattern.
	// A valid service account is always required.
	ServiceAccountPattern string `json:"serviceAccountPattern"`
	// NamespacePatterns is a list of namespace name regex patterns that are allowed access.
	NamespacePatterns []string `json:"namespacePatterns,omitempty"`
	// PodNamePatterns is a list of pod name regex patterns that should be allowed access.
	PodNamePatterns []string `json:"podNamePatterns,omitempty"`
	// PodLabels is a map of pod label key-value pairs that should be allowed access.
	PodLabels map[string]string `json:"podLabels,omitempty"`
	// MatchPolicy is the policy to use when matching the access control rules. If
	// set to "any", only one of the rules should match. If set to "all", all the
	// rules should match.
	//
	// +kubebuilder:validation:Enum=any;all
	// +kubebuilder:default=all
	MatchPolicy string `json:"matchPolicy,omitempty"`
}

// CSISecretsStatus defines the observed state of CSISecrets
type CSISecretsStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// CSISecrets is the Schema for the csisecrets API
type CSISecrets struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   CSISecretsSpec   `json:"spec,omitempty"`
	Status CSISecretsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CSISecretsList contains a list of CSISecrets
type CSISecretsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CSISecrets `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CSISecrets{}, &CSISecretsList{})
}
